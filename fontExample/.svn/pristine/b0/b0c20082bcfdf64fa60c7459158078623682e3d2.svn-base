package com.icia.fontExample.Service;

import java.io.*;

import javax.mail.*;

import org.springframework.beans.factory.annotation.*;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.password.*;
import org.springframework.web.multipart.*;

import com.icia.fontExample.Dao.*;
import com.icia.fontExample.entity.*;


public class MemberService {
	@Autowired
	private MemberDao memberDao;
	@Autowired
	private PasswordEncoder pwdEncoder;
	@Autowired
	@Value("#{config['upload.profile.folder']}")
	private String PROFILE_FOLDER;
	@Value("#{config['download.profile.uri']}")
	private String PROFILE_URI;
	@Value("#{config['login.cnt.silver']}")
	private int LOGIN_CNT_FOR_SILVER;
	@Value("#{config['write.cnt.silver']}")
	private int WRITE_CNT_FOR_SILVER;
	@Value("#{config['login.cnt.gold']}")
	private int LOGIN_CNT_FOR_GOLD;
	@Value("#{config['write.cnt.gold']}")
	private int WRITE_CNT_FOR_GOLD;

	public String findId(String name, String tel) throws MessagingException {
		String result = memberDao.findUsernameByIrumAndEmail(name, tel);
		System.out.println("아이디 :" + result);
		if(result==null)
			throw new IllegalArgumentException("사용자를 찾지 못했습니다");
		else {
			/*
			String text = "<p>아이디를 찾았습니다</p>";
			text += "<p>아이디 : " + result + "</p>";
			text += "<p>사용자 보안을 위해 로그인 후 바로 비밀번호를 변경해주시기 바랍니다</p>";
			text += "로그인 하기 : <a href='http://localhost:8081/aboard2s/user/login'>클릭하세요</a>";
			Mail mail = Mail.builder().sender("webmaster@icia.com").receiver(email).title("아이디 확인 메일입니다").content(text).build();
			mailUtil.sendMail(mail);
			return "아이디를 찾았습니다. 이메일을 확인하십시오";
			*/
			return result;
		}
	}

	// 스프링의 @Transactional은 예외가 발생하면 자동으로 rollback한다
	// 단 체크하지 않는 예외, 즉 RuntimeException의 자식 예외일 때만 동작한다
	// 프로그래머가 동작할 예외를 지정하려면 아래와 rollbackFor를 이용해 지정
	// @Transactional(rollbackFor = AuthenticationFailedException.class)
	public String resetPwd(String name, String tel) throws MessagingException {
		String encodedPassword = memberDao.findPasswordByIdAndEmail(name, tel);
		if(encodedPassword==null)
			throw new IllegalArgumentException("사용자를 찾지 못했습니다");
		//String newPassword = RandomStringUtils.randomAlphanumeric(20);
		String newPassword = "Java18!@";
		
		String text = "<p>새로운 비밀번호가 발급되었습니다</p>";
		text += "<p>새로운 비밀번호 : " + newPassword + "</p>";
		text += "<p>사용자 보안을 위해 로그인 후 바로 비밀번호를 변경해주시기 바랍니다</p>";
		text += "로그인 하기 : <a href='http://localhost:8081/aboard2s/user/login'>클릭하세요</a>";
		// 메일 발송이 실패할 수 있다. 메일 발송 후 비밀번호 저장
		memberDao.updatePassword(name, pwdEncoder.encode(newPassword));
		return "새로운 비밀번호가 발송되었습니다. 이메일을 확인하십시오"; 		
	}
	
	public String pwdCheck(String username, String password) {
		String encodedPassword = memberDao.findPasswordById(username);
		if(pwdEncoder.matches(password, encodedPassword)==false) 
			throw new IllegalArgumentException("비밀번호를 확인하지 못했습니다");
		return "OK";
	}

	public Member readme(String username) {
		Member member = memberDao.findById(username);
		return member;
	}

	public String updateName(String username, String name) {
		if(memberDao.updateName(username, name)==0)
			throw new IllegalArgumentException("이름을 변경하지 못했습니다");
		return "OK";
	}

	public String updatePassword(String username, String password, String newPassword) {
		String encodedPassword = memberDao.findById(username).getPassword();
		if(pwdEncoder.matches(password, encodedPassword)==false)
			throw new IllegalArgumentException("비밀번호를 확인하지 못했습니다");
		memberDao.updatePassword(username, pwdEncoder.encode(password));
		return "OK";
	}

	public Member update(Member member, MultipartFile sajin) throws IllegalStateException, IOException {
		if(memberDao.update(member)==0)
			throw new IllegalArgumentException("사용자 정보를 변경하지 못했습니다");
		if(sajin!=null) {
			if(sajin.getContentType().toLowerCase().startsWith("image/")) {
				int lastIndexOfDot =  sajin.getOriginalFilename().lastIndexOf('.');
				String extension = sajin.getOriginalFilename().substring(lastIndexOfDot);
				String imageName = member.getUsername() + extension;
				File file = new File(PROFILE_FOLDER, imageName);
				sajin.transferTo(file);
				String fileUrl = PROFILE_URI + imageName;
				//member.setProfile(fileUrl);
			}
		}
		return memberDao.findById(member.getUsername());
	}
	


}
